Very old version, it has many errors, but i won't fix or rewrite it.

'''  syntax  '''


atom = var | python string | python number | bool
python string = '"' s* '"' | '"' s* '"' '%' binary_expr
bool = True | False
func_call = func '('args')' | sys_call
func = funcname | '(' lambda ')' | sys_call_command
func_partial = '@' func '('args')'  
sys_call = '$' [s+] $ 
sys_call_command = '$' "'''" [S+]) "'''"
lambda = 'lambda' args ':' expr
args = expr,expr, ... expr [,?]

pattern_assign = pattern_var '=' expr

val_expr = atom | lambda | list | dict | tuple
prefix_expr = val_expr | unary [prefix_expr | suffix_expr | parn_expr] | func_partial
suffix_expr = prefix_expr [ () | [] ]+
unary_expr = prefix_expr | suffix_expr
binary_expr = unary_expr | [unary_expr | parn_expr] binary_op not_if_expr
parn_expr = '(' binary_expr ')' | '(' simple_if_expr ')'
simple_if_expr = not_if_expr 'if' not_if_expr 'else' not_if_expr 
not_if_expr = binary_expr | parn_expr 
expr = parn_expr | binary_expr | simple_if_expr


assign = var '=' expr
list = '[' expr | list_splice_index | not_if_expr for var in not_if_expr [,] ']'
tuple = '[' expr [,] ']'
dict = '{' [expr':' expr]* '}'
list_splice_index = '[' index+[,] ']'
index = Int | Int:Int | Int:Int:Int
get_val = var'['keys']'
keys = expr+[,] | list_splice_index


control_expr = if_expr | for_expr | while_expr
control_exprs = [control_expr | expr]+ 
cond = expr
if_expr = 'if' '(' cond ')'  control_exprs 'else' control_exprs 'end'
for_expr = 'for' '(' var|pattern_var 'in' expr ')' control_exprs 'end'
while_expr = 'while' '(' cond ')' control_exprs 'end'


def = 'def' funcname '('def_args')' body return? 'end'
return = 'return' expr 
block_expr = expr | control_expr
body_expr = s_expr | def
body = body_expr*
def_args = var, ... var, assign, ... assign [,?]
