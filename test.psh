
1==2 and 2==2 or 1>2
">>> NUM"
+1
-2.0
- .001
1E+3


">>> STRING"
['a', 'bcd', "hello", "use\tpython\n", "swd'de'", 'qaz\'wsx']
"""  1234567890-="
     qww""ertyuiiooopo
	 asdf'''''ghjkl;'
	 zxcvbnm,./
"""

">>> LIST"
[]
[1,2,3,4,5]
[1+2, "os", "cd" , L(x):x+1 ]
[1:20:2, 2:20:2]
[1,2,3] + [4,5,6]
lst = [1, 3, 7, 2, \
    4, 6, 0, 
    2:16:3, 1:4]
lst[0]
l1 = lst[8,6,4,2,0]
l2 = lst[8:0:-2]

"TUPLE"
(1,)
(1,2)

">>> DICT"
{}
{1:'a', 2:'b', 
	3:1+2, 'c': (1+3) / 2}

">>> LAMBDA"
fl = L(x,y): x+y
fl2 = lambda (x,y): x * y
fl3 = _ >= lst[0]
add_one = fl(_, 1)

">>> ASSIGN"
b = add_one(add_one(add_one(1)))
b == 1 | add_one | add_one |add_one
c = a = 1 + 2
c
dt = {c:a}
1==2 or 2==2
[dt[c], a, b]
dt[c] == a and b == a + 1

">>> EXPR"
1+ 2/3 -5 + 2 * (3+1/2)
1+ 2/3 -(5 + 2 * (3+1/2))
2/2 + 2/3 -(5 + 2 * fl(1,2) + fl2(2,3))

ss = "hello" + 'world'
1 + 1 == 2
-+-2
fl3(lst[0])
fl3(lst[0]-1)

">>> IF FOR WHILE"
True if len(ss) > 1 else False

def branchSel(signal)
    if(signal==0)
        return 0
    else 
        if(signal == 1)
            return 1
        else 
            if(signal==2)
                return 2
            else
                return 3
            end
        end
    end
end

branchSel(0) == 0
branchSel(1) == 1
branchSel(2) == 2
branchSel(3) == 3


def branchSel2(signal)
    if(signal==0)
        return 0
    elif(signal == 1)
        return 1
    elif(signal == 2)
        return 2
    else
        return 3
    end
end

branchSel2(0) == 0
branchSel2(1) == 1
branchSel2(2) == 2
branchSel2(3) == 3

for (x in lst)
 	if(x>5)
    	print(x)
	end
end

i = 0
while(i<len(lst))
	if(lst[i] > 5)
		print(lst[i])
	end
	i = i + 1
end

">>> DEF CALL"
def qsort(lst)
    if (len(lst) <= 1)
        return lst
    end
    leftpart = filter(lst, _ < lst[0]) | list
    rightpart = filter(lst, _ > lst[0]) | list
    eqpart = filter(lst, L(x): x == lst[0]) | list
    return qsort(leftpart) + eqpart + qsort(rightpart)
end

print("###-func-qsort")
qsort(lst)
print("###-end")

xxyy = 111
"closure"
def test_closure(xy = 1)
    xxyy = 2*xy
    def add_one()
        xxyy = xxyy + 1
        return xxyy
    end
    return add_one
end

add_one = test_closure()
(add_one(),add_one(),add_one())

add_one = test_closure(2)
(add_one(),add_one(),add_one())

print("xxyy:", xxyy)

">>> PIPE"
ls(".") | head
a = ls(".") 
filter(a, lambda (x):len(x) > 3)
ls(".") | filter(_, lambda (x):len(x) > 3) | list


">>> CALL SHELL COMMANDS" + " fork一个进程通过shell解释shell命令, cd对当前进程不生效"
$ ls
$ /sbin/ifconfig|sed -n '/inet addr/s/^[^:]*:\([0-9.]\{7,15\}\) .*/\1/p'

